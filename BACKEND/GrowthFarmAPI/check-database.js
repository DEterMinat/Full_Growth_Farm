// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ _GrowthFarm ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
const { sequelize } = require('./src/config/database');
require('dotenv').config();

async function checkGrowthFarmTables() {
  try {
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    console.log(`üìä ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${process.env.DB_NAME} @ ${process.env.DB_HOST}:${process.env.DB_PORT}`);
    console.log('=' .repeat(80));

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await sequelize.authenticate();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n');

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [results] = await sequelize.query(`
      SELECT 
        TABLE_NAME as tableName,
        TABLE_ROWS as tableRows,
        DATA_LENGTH as dataLength,
        INDEX_LENGTH as indexLength,
        CREATE_TIME as createTime,
        UPDATE_TIME as updateTime,
        TABLE_COMMENT as tableComment
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = '${process.env.DB_NAME}'
      ORDER BY TABLE_NAME
    `);

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ _GrowthFarm ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    const growthFarmTables = results.filter(table => 
      table.tableName.endsWith('_GrowthFarm')
    );

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log('-' .repeat(80));
    results.forEach((table, index) => {
      const isGrowthFarm = table.tableName.endsWith('_GrowthFarm');
      const icon = isGrowthFarm ? 'üå±' : 'üìÑ';
      const highlight = isGrowthFarm ? '*** ' : '    ';
      
      console.log(`${highlight}${icon} ${index + 1}. ${table.tableName}`);
      if (table.tableRows !== null) {
        console.log(`${highlight}   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${table.tableRows || 0}`);
      }
      if (table.tableComment) {
        console.log(`${highlight}   üí¨ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${table.tableComment}`);
      }
      console.log();
    });

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á _GrowthFarm
    console.log('\nüå± ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ "_GrowthFarm" ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢:');
    console.log('=' .repeat(80));
    
    if (growthFarmTables.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ "_GrowthFarm" ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢');
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á _GrowthFarm ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${growthFarmTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á\n`);
      
      growthFarmTables.forEach((table, index) => {
        console.log(`üå± ${index + 1}. ${table.tableName}`);
        console.log(`   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${table.tableRows || 0}`);
        console.log(`   üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${formatBytes(table.dataLength || 0)}`);
        console.log(`   üîç ‡∏Ç‡∏ô‡∏≤‡∏î Index: ${formatBytes(table.indexLength || 0)}`);
        
        if (table.createTime) {
          console.log(`   üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(table.createTime).toLocaleString('th-TH')}`);
        }
        
        if (table.updateTime) {
          console.log(`   üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date(table.updateTime).toLocaleString('th-TH')}`);
        }
        
        if (table.tableComment) {
          console.log(`   üí¨ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${table.tableComment}`);
        }
        console.log();
      });

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á _GrowthFarm ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      console.log('\nüèóÔ∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á _GrowthFarm:');
      console.log('=' .repeat(80));
      
      for (const table of growthFarmTables) {
        try {
          console.log(`\nüìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${table.tableName}`);
          console.log('-' .repeat(40));
          
          const [columns] = await sequelize.query(`
            SELECT 
              COLUMN_NAME as columnName,
              DATA_TYPE as dataType,
              IS_NULLABLE as isNullable,
              COLUMN_DEFAULT as columnDefault,
              COLUMN_KEY as columnKey,
              EXTRA as extra,
              COLUMN_COMMENT as columnComment
            FROM information_schema.COLUMNS 
            WHERE TABLE_SCHEMA = '${process.env.DB_NAME}' 
            AND TABLE_NAME = '${table.tableName}'
            ORDER BY ORDINAL_POSITION
          `);

          columns.forEach((col, idx) => {
            const keyIcon = col.columnKey === 'PRI' ? 'üîë' : 
                           col.columnKey === 'UNI' ? 'üîê' : 
                           col.columnKey === 'MUL' ? 'üîó' : 'üìù';
            
            console.log(`   ${keyIcon} ${idx + 1}. ${col.columnName}`);
            console.log(`      üî§ ‡∏ä‡∏ô‡∏¥‡∏î: ${col.dataType}`);
            console.log(`      ‚ùì Null: ${col.isNullable}`);
            
            if (col.columnDefault !== null) {
              console.log(`      üéØ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${col.columnDefault}`);
            }
            
            if (col.extra) {
              console.log(`      ‚öôÔ∏è Extra: ${col.extra}`);
            }
            
            if (col.columnComment) {
              console.log(`      üí¨ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${col.columnComment}`);
            }
            console.log();
          });

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
          try {
            const [sampleData] = await sequelize.query(`
              SELECT * FROM \`${table.tableName}\` LIMIT 3
            `);
            
            if (sampleData.length > 0) {
              console.log(`   üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (${sampleData.length} ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):`);
              console.log('   ' + '-' .repeat(35));
              sampleData.forEach((row, idx) => {
                console.log(`   üìÑ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${idx + 1}:`);
                Object.keys(row).slice(0, 5).forEach(key => {
                  let value = row[key];
                  if (value && typeof value === 'string' && value.length > 50) {
                    value = value.substring(0, 50) + '...';
                  }
                  console.log(`      ${key}: ${value}`);
                });
                console.log();
              });
            } else {
              console.log('   üì≠ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)');
            }
          } catch (sampleError) {
            console.log('   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ');
          }

        } catch (structureError) {
          console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table.tableName} ‡πÑ‡∏î‡πâ: ${structureError.message}`);
        }
      }
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ
    console.log('\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ:');
    console.log('=' .repeat(80));
    console.log(`üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${results.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á`);
    console.log(`üå± ‡∏ï‡∏≤‡∏£‡∏≤‡∏á _GrowthFarm: ${growthFarmTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á`);
    console.log(`üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ${results.length - growthFarmTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á`);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°
    const totalDataSize = growthFarmTables.reduce((sum, table) => sum + (table.dataLength || 0), 0);
    const totalIndexSize = growthFarmTables.reduce((sum, table) => sum + (table.indexLength || 0), 0);
    const totalRows = growthFarmTables.reduce((sum, table) => sum + (table.tableRows || 0), 0);
    
    console.log(`üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏° _GrowthFarm: ${formatBytes(totalDataSize)}`);
    console.log(`üîç ‡∏Ç‡∏ô‡∏≤‡∏î Index ‡∏£‡∏ß‡∏° _GrowthFarm: ${formatBytes(totalIndexSize)}`);
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏° _GrowthFarm: ${totalRows.toLocaleString()} ‡πÅ‡∏ñ‡∏ß`);

    console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    console.error(error);
  } finally {
    await sequelize.close();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  checkGrowthFarmTables();
}

module.exports = { checkGrowthFarmTables };
